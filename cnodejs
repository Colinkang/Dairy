当需要导出一个对象时 exports 和module.exports 均可使用
当需要导出一个非对象接口时 就必须覆盖 module.exports
如何开始nodejs http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js

核心模块 Node.js标准API中提供的模块 如fs http net nvm
核心模块拥有最高的加载优先级
文件模块 存储为单独的文件的模块
加载的方式有两种
一种按路径加载 一种查找node_modules文件
如果 require参数以“/”开头，那么就以绝对路径的方式查找模块名称
例如 require('/home/byvoid/module')将会按照优先级依次尝试加载
/home/byvoid/module.js、/home/byvoid/module.json、/home/byvoid/module.node
如果require 参数以'./'或'../'开头，那么则以相对路径查找模块 例如 require('./hello')
来加载同一文件夹下的hello.js

如果require参数不以“/”、“./”、“../”开头，而该模块又不是核心模块，那么就通过查找
node_modules加载模块了。

当require遇到一个既不是核心模块，又不是以路径形式表示的模块名称时，会试图在当前
目录下的node_modules目录下来查找是不是有这样一个模块。如果没有找到，则会在当前目录
的上一层中的node_modules目录中继续查找，反复执行这一过程，直到根目录为止。

闭包 由函数及其封闭的自由变量组成的集合体。


事件式编程
当结果返回时，会将事件发送到事件队列，等到线程进入事件循环后，才会调用之前的回调函数继续执行后面的逻辑。
闭包
是函数式编程中的概念
当一个函数返回它内部定义的一个函数时，就产生了一个闭包，闭包不但包括被返回的函数，还包括这个函数的定义环境。
用途：一是实现嵌套的回调函数，二实现私有成员
对象：
创建和访问
JavaScript中的对象实际上就是一个由属性组成的关联数组，属性由名称和值组成，值的类型可以是任何数据类型。
使用关联数组创建对象成员
var foo = {};
foo['prop1'] = 'bar';
foo['prop2'] = false;
foo['prop3'] = function(){ return 'hello world';}
使用对象初始化器创建对象
var foo = {
'prop1':'bar',
 prop:'false',
 prop3:function(){
 return 'hello world';
 }
};
使用初始化器时，对象属性名是否加引号是可选的
构造函数创建
function User(name,url){
this.name=name;
this.url =url;
this.display = function(){
console.log(this.name);
}
}
var someone =new User('clare','https://www.google.com');
上下文对象
this指针永远是这个引用所属的对象
call
apply
func.call(thisArg[,arg1[,arg2[,...]]]);
func.apply(thisArg[,argsArray]);
func是函数的引用，thisArg是func被调用的上下文对象
如何改变被调用函数的上下文呢？可以使用call 或者apply，但要重复使用会不方便，
因为每次都要把上下文对象作为参数传递，而且还会使代码不直观。可使用bind
func.bind(thisArg[,arg1[,arg2,[,...]]])

原型:
构造函数内定义的属性继承方式和原型不同，子对象需要显示调用父对象才能继承构造函数内定义的属性。
构造函数内定义的任何属性，包括函数在内都会被重复创建，同一个构造函数产生的两个对象不共享实例
构造函数内定义的函数有运行时闭包的开销，因为构造函数内的局部变量对其中定义的函数来说是可见的。

运用原则：
1、除非必须使用构造函数闭包，否则尽量用原型定义成员函数，因为这样会减小开销
2、尽量在构造函数内定义一般成员，尤其是对象或数组，因为用原型定义的成员是多个实例共享的。

原型链
一类是用户创建的对象
一类是构造函数对象
一类是原型对象
这三类对象每一类都有一个__proto__属性，它指向该对象的原型，从任何对象沿着它开始遍历都可以追溯到Object.prototype
构造函数对象有prototype属性，指向一个原型对象
通过构造函数创建对象时，被创建对象的__proto__属性将会指向构造函数的prototype属性
原型对象有constructor属性，指向它对应的构造函数
继承是依靠一套叫做原型链的机制实现的
属性继承的本质就是一个对象可以访问到它的原型链上任何一个原型对象的属性。


回调函数
异步
同步
阻塞
线程在执行过程如果遇到磁盘读写或者网络通信(统称I/O操作)，通常要耗费较长的时间，这时操作系统会剥夺这个线程的
CPU控制权，使其暂停执行，同时将资源让给其他的工作线程，这种线程调度方式成为阻塞。当I/O操作完毕时，操作系统
将这个阻塞状态解除，恢复其对CPU的控制权，令其继续执行。这种I/O模式成为阻塞式I/O.

多线程可以让CPU资源不被阻塞中的资源浪费。
而在非阻塞模式中，线程不会被I/O阻塞，永远在利用CPU。

多线程：需要分配内存，列入调度，同时切换的时候还要执行内存换页，CPU的缓存被清空，
切换回来的时候还要重新从内存中读取信息。
